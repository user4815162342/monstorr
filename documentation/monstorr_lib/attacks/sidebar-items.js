initSidebarItems({"enum":[["AttackBonus","These values are used to indicate what abilities attack bonuses will come from. For hit rolls, these bonuses are added to the proficiency bonus. For damage, these abilities are used alone."],["AttackEffect","An attack effect represents the results of an attack, or an action in general. Usually, this effect is to cause damage to the target, but there are also other choices. Many of the variants here are based on conditional results, which cause different damage or types of damage based on that condition. These conditions change the wording of the descriptions created with the effect, even if they don’t change the damage per round."],["AttackType","Used for adding the words “Weapon” or “Spell” into the type of the attack."],["CompoundAttackEffect","Some creatures cause extra damage or other effects when they have a successful attack. It was simpler to model this as a separate structure, rather than add a lot more choices to the [`Attack`] variant. Many of the variants in the CompoundAttackEffect simply add one more effect. However, the compound attack effect can be used to generate a description, and the variants given can be used to generate descriptions for 95% of the attacks on creatures in the core books."],["Multiattack","The description for a “Multiattack” action is written by hand, not generated from multiattack values. The Multiattack value’s primary use is for calculating the Challenge Rating, as that calculation needs to know what attacks a creature can make in each round. While the challenge rating is not yet automatically calculated, it is good to have this information for when it will be."],["Weapon","These values are used to represent standard weapons in attacks. Custom weapons are made by added custom attack actions. All weapons take an integer which represents a bonus (or penalty) to be added to attack and damage rolls, such as might come from a magic weapon."]],"struct":[["Attack","`(type: option(<AttackType>)?, bonus: <AttackBonus>?, magic: option(<integer>)?, reach: option(<integer>)?, range: option(<integer>)?, long_range: option(<integer>)?, target: <string>)`"],["ParseWeaponError",""]]});